{"version":3,"sources":["data.js","reuseableStyleComp.js","App.js","serviceWorker.js","index.js"],"names":["testData","name","quantity","Main","styled","div","Header","h1","OuterContainer","BarContainer","ToolTip","span","Bar","props","dataHeight","LegendContainer","Products","Text","App","Bars","map","ele","index","key","Product","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAAaA,G,MAAW,CACpB,CAACC,KAAM,WACPC,SAAU,IAEV,CAACD,KAAK,WACNC,SAAU,KAEV,CAACD,KAAK,WACNC,SAAU,KAEV,CAACD,KAAK,WACNC,SAAU,KAEV,CAACD,KAAK,WACNC,SAAU,KAEV,CAACD,KAAK,WACNC,SAAU,O,m+CCfP,IAAMC,EAAOC,IAAOC,IAAV,KAEJC,EAASF,IAAOG,GAAV,KAKNC,EAAiBJ,IAAOC,IAAV,KAIdI,EAAeL,IAAOC,IAAV,KAUZK,EAAUN,IAAOO,KAAV,KAcPC,EAAMR,IAAOC,IAAV,IACJK,GAMA,SAAAG,GAAK,gBAAOA,EAAMC,WAAb,SAEJC,EAAkBX,IAAOC,IAAV,KAQfW,EAAWZ,IAAOC,IAAV,KAKRY,EAAOb,IAAOC,IAAV,KCjBFa,MA5Bf,WACE,IAAMC,EAAOnB,EAASoB,KAAI,SAACC,EAAKC,GAC9B,OAAO,kBAACV,EAAD,CAAKE,WAAYO,EAAInB,SAAUqB,IAAKD,GACzC,kBAACZ,EAAD,uBAAkBW,EAAInB,eAIpBsB,EAAUxB,EAASoB,KAAI,SAAAC,GAC3B,OACE,kBAACL,EAAD,CAAUO,IAAKF,EAAIpB,MACjB,kBAACgB,EAAD,KAAOI,EAAIpB,UAKjB,OACE,kBAACE,EAAD,KACE,kBAACG,EAAD,eACA,kBAACE,EAAD,KACE,kBAACC,EAAD,KAAeU,IAEjB,kBAACX,EAAD,KACE,kBAACO,EAAD,KAAkBS,MCxBNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e789a20a.chunk.js","sourcesContent":["export const testData = [\n    {name: 'product1',\n    quantity: 70},\n\n    {name:'product2',\n    quantity: 110},\n\n    {name:'product3',\n    quantity: 235},\n\n    {name:'product4',\n    quantity: 220},\n\n    {name:'product5',\n    quantity: 150},\n\n    {name:'product6',\n    quantity: 120}\n]","import styled from 'styled-components';\n\nexport const Main = styled.div``;\n\nexport const Header = styled.h1`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const OuterContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nexport const BarContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: flex-end;\n  border-style: solid;\n  width: 470px;\n  height: 263px;\n`;\n\n\nexport const ToolTip = styled.span`\n  visibility: hidden;\n  position: absolute;\n  background-color: rgb(240, 248, 249);\n  margin-left: 50px;\n  width: 91px;\n  height: 30px;\n  border: 1px solid black;\n  border-radius: 4px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Bar = styled.div`\n  &:hover ${ToolTip} {\n    visibility: visible;\n    transition-delay: .5s;\n  }\n  background-color: rgb(208, 22, 65);\n  width: 46px;\n  height: ${props => `${props.dataHeight}px`};\n`;\nexport const LegendContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  width: 470px;\n  height: 90px;\n`;\n\n\nexport const Products = styled.div`\n  display: flex;\n  width: 46px;\n`;\n\nexport const Text = styled.div`\n  display: flex;\n  align-items: center;\n  transform: rotate(-90deg);\n  padding-bottom: 20px;\n`;\n","import React from 'react';\nimport { testData } from './data';\nimport {\n  Main,\n  Header,\n  OuterContainer,\n  BarContainer,\n  Bar,\n  LegendContainer,\n  Products,\n  Text,\n  ToolTip\n} from './reuseableStyleComp';\n\nfunction App() {\n  const Bars = testData.map((ele, index) => {\n    return <Bar dataHeight={ele.quantity} key={index}>\n      <ToolTip> {`qty ${ele.quantity}`}</ToolTip>\n    </Bar>;\n  });\n\n  const Product = testData.map(ele => {\n    return (\n      <Products key={ele.name}>\n        <Text>{ele.name}</Text>\n      </Products>\n    );\n  });\n\n  return (\n    <Main>\n      <Header>My Bar</Header>\n      <OuterContainer>\n        <BarContainer>{Bars}</BarContainer>\n      </OuterContainer>\n      <OuterContainer>\n        <LegendContainer>{Product}</LegendContainer>\n      </OuterContainer>\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}